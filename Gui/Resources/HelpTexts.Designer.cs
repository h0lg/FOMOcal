//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FomoCal.Gui.Resources {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class HelpTexts {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal HelpTexts() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("FomoCal.Gui.Resources.HelpTexts", typeof(HelpTexts).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Appends to the existing query if it matches the syntax, otherwise replaces it..
        /// </summary>
        internal static string AppendSelectedQuery {
            get {
                return ResourceManager.GetString("AppendSelectedQuery", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Classes that have{0} visual styles attached.
        ///This may be a hint they are or are not good selectors, depending on the page.
        ///
        ///^^Classes are used for reoccurring elements and can be combined to increase specificity.
        ///^^
        ///^^If the semantics of a class name match what you&apos;re selecting for, it&apos;s probably a good fit..
        /// </summary>
        internal static string ClassesWith_Style {
            get {
                return ResourceManager.GetString("ClassesWith_Style", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A note explaining something you&apos;re doing - e.g. in the selector or the RegEx - that&apos;s complicated or not obvious..
        /// </summary>
        internal static string Comment {
            get {
                return ResourceManager.GetString("Comment", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The [language/country code](https://en.wikipedia.org/wiki/Language_code) used to parse the date in ISO 639 (en) or ISO 3166 format (en-US)..
        /// </summary>
        internal static string DateScrapeJobCulture {
            get {
                return ResourceManager.GetString("DateScrapeJobCulture", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The .NET [custom](https://learn.microsoft.com/en-us/dotnet/standard/base-types/custom-date-and-time-format-strings) or [standard](https://learn.microsoft.com/en-us/dotnet/standard/base-types/standard-date-and-time-format-strings) date format used to parse the date.
        ///
        ///^^ddd | dddd – Weekday (short | full name)
        ///^^d | dd – Day of month (no | with leading zero)
        ///^^M | MM – Month number (no | with leading zero)
        ///^^MMM | MMMM – Month name (short | full)
        ///^^yy | yyyy – Year (2 | 4 digits)
        ///^^separators like . /  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string DateScrapeJobFormat {
            get {
                return ResourceManager.GetString("DateScrapeJobFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The ID of the picked node. Should be unique in the document according to HTML spec - but may not be.
        ///
        ///^^Potentially a selector detail with very high specificity - too high if they are unique and you want to select a re-occurring element..
        /// </summary>
        internal static string ElementId {
            get {
                return ResourceManager.GetString("ElementId", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The (1-based) position of the picked element relative to its siblings (of the same tag/element name) in their parent. This is quite a fragile selector detail - only use this if you have no other alternatives..
        /// </summary>
        internal static string ElementPosition {
            get {
                return ResourceManager.GetString("ElementPosition", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Toggle picking mode.
        ///You may want to disable this to interact with the page as you would in a normal browser, e.g. to close popups and overlays
        ///- or play with those eye-opening 🍪 cookie reminders sponsored by the EU if you&apos;re lucky enough to be browsing from there..
        /// </summary>
        internal static string EnablePicking {
            get {
                return ResourceManager.GetString("EnablePicking", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Re-interpret the extracted text using a specific character set. Try setting this to e.g. &quot;UTF-8&quot; if you notice incorrectly encoded characters in it. This is useful for the rare web page containing text with a different character set from what it (or the webserver that serves it) claims to contain.
        ///
        ///You can specify one or two values, separated by a | pipe.
        ///
        ///The first will be used for interpreting text directly from the page&apos;s HTML, the second to encode HTML passed across the JS bridge by the automated br [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Encoding {
            get {
                return ResourceManager.GetString("Encoding", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Filters the selected event containers. Supply a simple case-insensitive substring the container text must contain.
        ///You may also use XPath for more control - if you do, stick to XPath 1.0 features and pre-fix your filter with &apos;{0}&apos;.
        ///
        ///^^You could do this in the selector - but you&apos;d have to write both selection and filtering in the more complicated XPath syntax.
        ///^^Also, pre-filtering events in the selector will cause initial loading to run into a timeout when waiting for lazy-loaded events and the page con [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string EventContainerFilterFormat {
            get {
                return ResourceManager.GetString("EventContainerFilterFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The selector to the event containers - of which there are probably multiple on the page, each containing as many of one event&apos;s details as possible - but only of a single event.
        ///
        ///^^Some event pages for example display multiple events on the same day in a group. If you see it, use skip/take to try it out on such a group and choose a container that contains only one of their details - otherwise only the first event on any given day will be retrieved.
        ///^^You&apos;ll be able to select the date or other excluded ev [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string EventContainerSelector {
            get {
                return ResourceManager.GetString("EventContainerSelector", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The ancestor path or parts of it can help increase the specificity of your selector if the picked element itself doesn&apos;t offer enough, e.g. doesn&apos;t have classes..
        /// </summary>
        internal static string IncludePickedSelectorPath {
            get {
                return ResourceManager.GetString("IncludePickedSelectorPath", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You may want to try this option if your event selector doesn&apos;t match anything without it even though it should*.
        ///It will load the page and wait for an element matching your selector to become available, return when it does and time out if it doesn&apos;t after 10s.
        ///
        ///^^This works around pages that lazy-load events. Some web servers only return an empty template of a page on the first request to improve the response time, then fetch more data asynchronously and render it into the placeholders using a script run [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string LazyLoaded {
            get {
                return ResourceManager.GetString("LazyLoaded", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The selector of the element to click or link to navigate to load more or different events..
        /// </summary>
        internal static string NextEventPageSelector {
            get {
                return ResourceManager.GetString("NextEventPageSelector", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Existence of attributes other than id or class. Some depend on the element tag/name - so not/having different attributes will have varying specificity..
        /// </summary>
        internal static string OtherAttributes {
            get {
                return ResourceManager.GetString("OtherAttributes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The values of attributes other than id or class. Depending on the attribute, this may be a useful selector or too specific..
        /// </summary>
        internal static string OtherAttributeValues {
            get {
                return ResourceManager.GetString("OtherAttributeValues", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to All events are loaded into the first page - no paging required..
        /// </summary>
        internal static string PagingStrategyAllOnOne {
            get {
                return ResourceManager.GetString("PagingStrategyAllOnOne", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Different events are loaded into the same page after clicking an element..
        /// </summary>
        internal static string PagingStrategyClickElementToLoadDifferent {
            get {
                return ResourceManager.GetString("PagingStrategyClickElementToLoadDifferent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to More events are loaded into the same page after clicking an element..
        /// </summary>
        internal static string PagingStrategyClickElementToLoadMore {
            get {
                return ResourceManager.GetString("PagingStrategyClickElementToLoadMore", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Different events are loaded on the next page after navigating a hyperlink..
        /// </summary>
        internal static string PagingStrategyNavigateLinkToLoadDifferent {
            get {
                return ResourceManager.GetString("PagingStrategyNavigateLinkToLoadDifferent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to More events are loaded into the same page by scrolling it down..
        /// </summary>
        internal static string PagingStrategyScrollDownToLoadMore {
            get {
                return ResourceManager.GetString("PagingStrategyScrollDownToLoadMore", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You need some part of the selector in the last line - it selects the element you picked. Select the part you want and use ➕ append..
        /// </summary>
        internal static string PickedSelectorDisplay {
            get {
                return ResourceManager.GetString("PickedSelectorDisplay", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Every web page is made up of 🖽 [boxes inside boxes](https://en.wikipedia.org/wiki/Document_Object_Model#DOM_tree_structure) - kind of like Russian nesting dolls, but often with more than one contained child.
        ///Each box holds different parts of the page with different info. In the following, you can tell {0} which boxes to pick what kind of info from..
        /// </summary>
        internal static string ScrapeConfigInfoFormat {
            get {
                return ResourceManager.GetString("ScrapeConfigInfoFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The name of the attribute of the selected element to extract the text from..
        /// </summary>
        internal static string ScrapeJobAttribute {
            get {
                return ResourceManager.GetString("ScrapeJobAttribute", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An optional selector to a common ancestor of the event container and the event detail - for when the event detail has to be selected from outside of the event container, like a group that only displays the date once for multiple events on the same day..
        /// </summary>
        internal static string ScrapeJobClosest {
            get {
                return ResourceManager.GetString("ScrapeJobClosest", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Whether to ignore the text of nested elements and only extract direct text nodes from the HTML. Does not apply if an attribute is set..
        /// </summary>
        internal static string ScrapeJobIgnoreNestedText {
            get {
                return ResourceManager.GetString("ScrapeJobIgnoreNestedText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A pattern ([Regular Expressions](https://en.wikipedia.org/wiki/Regular_expression) in .NET flavor) that matches the part of text to extract. You may want to do this to extract text that is not cleanly selectable.
        ///
        ///^^[regex101](https://regex101.com/) is great to debug your RegEx, learn and find existing patterns. If you can&apos;t be bothered or are struggling - ask a chat bot for help, they&apos;re pretty good at this..
        /// </summary>
        internal static string ScrapeJobMatch {
            get {
                return ResourceManager.GetString("ScrapeJobMatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Multiple optional replacements to apply, in the form &quot;Pattern =&gt; Replacement, Pattern2 =&gt;&quot;.
        ///You may want to do this e.g. to convert a date string into a valid format. Patterns are [Regular Expressions](https://en.wikipedia.org/wiki/Regular_expression) in .NET flavor, but plain text often works.
        ///
        ///^^[regex101](https://regex101.com/) is great to debug your patterns, learn and find existing patterns. If you can&apos;t be bothered or are struggling - ask a chat bot for help, they&apos;re pretty good at this.
        ///^^
        ///^^Thi [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string ScrapeJobReplace {
            get {
                return ResourceManager.GetString("ScrapeJobReplace", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A selector to the element containing the text of the event detail..
        /// </summary>
        internal static string ScrapeJobSelector {
            get {
                return ResourceManager.GetString("ScrapeJobSelector", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to What&apos;s the difference? In most cases you&apos;ll want to use [CSS](https://www.w3schools.com/cssref/css_selectors.php) for its shorter and simpler selector syntax.
        ///
        ///# XPath
        ///For advanced scenarios you may want to try [XPath](https://www.w3schools.com/xml/xpath_syntax.asp), which has more features like [traversing along different axes](https://developer.mozilla.org/en-US/docs/Web/XML/XPath/Reference/Axes) in the document or [powerful functions](https://developer.mozilla.org/en-US/docs/Web/XML/XPath/Reference/Fu [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string SelectorSyntaxFormat {
            get {
                return ResourceManager.GetString("SelectorSyntaxFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The name of the HTML tag of the element you picked. It doesn&apos;t have much specificity on its own, because a page usually contains many elements with the same tag name - but it can add to that of your selector and is better than choosing just any element..
        /// </summary>
        internal static string TagName {
            get {
                return ResourceManager.GetString("TagName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 🧪 Test this strategy to load more events. You can watch the process in the 🖽 Visual Selector, e.g. the one for the event selector.
        ///If you test a strategy that involves clicking, make sure to disable the option &quot;Tap a page element to pick it.&quot;.
        /// </summary>
        internal static string TestPagingStrategy {
            get {
                return ResourceManager.GetString("TestPagingStrategy", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Toggle selector details for your picked element. More detail means more specificity - but beware that every moving part also increases the fragility of your selector. You&apos;ll want to find the sweet spot..
        /// </summary>
        internal static string ToggleSelectorDetail {
            get {
                return ResourceManager.GetString("ToggleSelectorDetail", resourceCulture);
            }
        }
    }
}
