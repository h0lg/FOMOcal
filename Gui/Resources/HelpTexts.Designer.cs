//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FomoCal.Gui.Resources {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class HelpTexts {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal HelpTexts() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("FomoCal.Gui.Resources.HelpTexts", typeof(HelpTexts).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Appends to the existing query if it matches the syntax, otherwise replaces it..
        /// </summary>
        internal static string AppendSelectedQuery {
            get {
                return ResourceManager.GetString("AppendSelectedQuery", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The [language/country code](https://en.wikipedia.org/wiki/Language_code) used to parse the date in ISO 639 (en) or ISO 3166 format (en-US)..
        /// </summary>
        internal static string DateScrapeJobCulture {
            get {
                return ResourceManager.GetString("DateScrapeJobCulture", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The .NET [custom](https://learn.microsoft.com/en-us/dotnet/standard/base-types/custom-date-and-time-format-strings) or [standard](https://learn.microsoft.com/en-us/dotnet/standard/base-types/standard-date-and-time-format-strings) date format used to parse the date..
        /// </summary>
        internal static string DateScrapeJobFormat {
            get {
                return ResourceManager.GetString("DateScrapeJobFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Toggle picking mode. You may want to disable this to interact with the page as you would in a normal browser, e.g. to close popups and overlays - or play with those eye-opening 🍪 cookie reminders sponsored by the EU if you&apos;re lucky enough to be browsing from there..
        /// </summary>
        internal static string EnablePicking {
            get {
                return ResourceManager.GetString("EnablePicking", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The selector to the event containers - of which there are probably multiple on the page, each containing as many of one event&apos;s details as possible - but only of a single event.
        ///
        ///Some event pages for example display multiple events on the same day in a group. If you see it, use skip/take to try it out on such a group and choose a container that contains only one of their details - otherwise only the first event on any given day will be retrieved.
        ///You&apos;ll be able to select the date or other excluded event  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string EventContainerSelector {
            get {
                return ResourceManager.GetString("EventContainerSelector", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The selector of the element to click or link to navigate to load more or different events..
        /// </summary>
        internal static string NextEventPageSelector {
            get {
                return ResourceManager.GetString("NextEventPageSelector", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You need some part of the selector in the last line - it selects the element you chose. Parts from the ancestor path in the above lines may help to narrow down your selection if just using the selector from the last line matches too much..
        /// </summary>
        internal static string PickedSelectorDisplay {
            get {
                return ResourceManager.GetString("PickedSelectorDisplay", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Every web page is made up of 🖽 [boxes inside boxes](https://en.wikipedia.org/wiki/Document_Object_Model#DOM_tree_structure) - kind of like Russian nesting dolls, but often with more than one contained child.
        ///Each box holds different parts of the page with different info. In the following, you can tell {0} which boxes to pick what kind of info from..
        /// </summary>
        internal static string ScrapeConfigInfoFormat {
            get {
                return ResourceManager.GetString("ScrapeConfigInfoFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The name of the attribute of the selected element to extract the text from..
        /// </summary>
        internal static string ScrapeJobAttribute {
            get {
                return ResourceManager.GetString("ScrapeJobAttribute", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An optional selector to a common ancestor of the event container and the event detail - for when the event detail has to be selected from outside of the event container, like a group that only displays the date once for multiple events on the same day..
        /// </summary>
        internal static string ScrapeJobClosest {
            get {
                return ResourceManager.GetString("ScrapeJobClosest", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Whether to ignore the text of nested elements and only extract direct text nodes from the HTML. Does not apply if an attribute is set..
        /// </summary>
        internal static string ScrapeJobIgnoreNestedText {
            get {
                return ResourceManager.GetString("ScrapeJobIgnoreNestedText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A pattern ([Regular Expressions](https://en.wikipedia.org/wiki/Regular_expression) in .NET flavour) that matches the part of text to extract. You may want to do this to extract text that is not cleanly selectable.
        ///
        ///[regex101](https://regex101.com/) is great to debug your RegEx, learn and find existing patterns. If you can&apos;t be bothered or are struggling - ask a chat bot for help, they&apos;re pretty good at this..
        /// </summary>
        internal static string ScrapeJobMatch {
            get {
                return ResourceManager.GetString("ScrapeJobMatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Multiple optional replacements to apply, in the form &quot;Pattern =&gt; Replacement, Pattern2 =&gt;&quot;. You may want to do this e.g. to convert a date string into a valid format. Patterns are [Regular Expressions](https://en.wikipedia.org/wiki/Regular_expression) in .NET flavour, but plain text often works.
        ///
        ///[regex101](https://regex101.com/) is great to debug your patterns, learn and find existing patterns. If you can&apos;t be bothered or are struggling - ask a chat bot for help, they&apos;re pretty good at this.
        ///
        ///This and  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string ScrapeJobReplace {
            get {
                return ResourceManager.GetString("ScrapeJobReplace", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A [CSS](https://www.w3schools.com/cssref/css_selectors.php) or [XPath](https://www.w3schools.com/xml/xpath_syntax.asp) selector to the element containing the text of the event detail..
        /// </summary>
        internal static string ScrapeJobSelector {
            get {
                return ResourceManager.GetString("ScrapeJobSelector", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to What&apos;s the difference? In most cases you&apos;ll want to use CSS for its shorter and simpler syntax.
        ///
        ///For advanced scenarios you may want to try XPath, which has more powerful functions, e.g. for filtering.
        ///Make sure to stick to XPath 1.0 features and [wrap your {0}](https://github.com/AngleSharp/AngleSharp.XPath?tab=readme-ov-file#basic-use). Using the ➕ append button will do that for you.
        ///E.g. to select elements with class &apos;event&apos; that have a &apos;category&apos; class div with the cleaned text &apos;concert&apos;, you&apos;d writ [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string SelectorSyntaxFormat {
            get {
                return ResourceManager.GetString("SelectorSyntaxFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You may want to try this option if your event selector doesn&apos;t match anything without it even though it should*.
        ///It will load the page and wait for an element matching your selector to become available, return when it does and time out if it doesn&apos;t after 10s.
        ///
        ///This works around pages that lazy-load events. Some web servers only return an empty template of a page on the first request to improve the response time, then fetch more data asynchronously and render it into the placeholders using a script runni [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string WaitForJsRendering {
            get {
                return ResourceManager.GetString("WaitForJsRendering", resourceCulture);
            }
        }
    }
}
